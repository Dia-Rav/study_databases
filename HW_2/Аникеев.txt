
Task 3
select companyName, abs(avg([промежуток между покупками]))
from(
    select *, DATEDIFF(day, dateId, dateId2) as [промежуток между покупками] // day->month
    from(
        select *, LAG(dateId) over(PARTITION by companyName order by dateId) as dateId2
        from(
            select companyName, dateId
            from distributor.singleSales
            WHERE companyName is not null
            GROUP BY companyName, dateId) as a) as b
    WHERE DATEDIFF(month, dateId, dateId2) is not NULL) as c
GROUP BY companyName

Task 7
select year(dateId) as [year], DATEPART(weekday, dateId) as [day of the week], sum(salesRub)
from distributor.singleSales
group by year(dateId), DATEPART(weekday, dateId)
order by year(dateId)

Task 1
select year(dateId) as [year], month(dateId) as [month], branchId, sum(salesRub) as revenue
from distributor.sales
where branchId is not null
group by year(dateId),month(dateId) , branchId
order by branchId

Task 5
--Показывает отличающиеся строки
select branchName as 'Филиал', DATEADD(day, 1, EOMONTH(dateId)) as 'Дата начала месяца', sum(salesRub) as 'Выручка компании'
from (select distinct dateId, salesRub, b.branchName from distributor.sales as a
left join distributor.branch as b
on a.branchId = b.branchId) as d
group by branchName, EOMONTH(dateId)
EXCEPT
select branchName as 'Филиал', DATEADD(day, 1, EOMONTH(dateId)) as 'Дата начала месяца', sum(salesRub) as 'Выручка компании'
from (select distinct dateId, salesRub, b.branchName, c.brand from distributor.sales as a
left join distributor.branch as b
on a.branchId = b.branchId
left join distributor.item as c
on a.itemId = c.itemId) as d
group by branchName, EOMONTH(dateId), brand

--Разница в суммах прибыли:
select top 1 revenue - rev1 as differences 
from(select f.*, LAG(revenue, 1, 0) over(order by revenue) as rev1
from(select sum(g.[Выручка компании]) as revenue
from(
select branchName as 'Филиал', DATEADD(day, 1, EOMONTH(dateId)) as 'Дата начала месяца', sum(salesRub) as 'Выручка компании'
from (select distinct dateId, salesRub, b.branchName from distributor.sales as a
left join distributor.branch as b
on a.branchId = b.branchId) as d
group by branchName, EOMONTH(dateId)) as g
UNION
select sum(g.[Выручка компании]) as revenue
from(
select branchName as 'Филиал', DATEADD(day, 1, EOMONTH(dateId)) as 'Дата начала месяца', sum(salesRub) as 'Выручка компании'
from (select distinct dateId, salesRub, b.branchName, c.brand from distributor.sales as a
left join distributor.branch as b
on a.branchId = b.branchId
left join distributor.item as c
on a.itemId = c.itemId) as d
group by branchName, EOMONTH(dateId), brand) as g) as f) as k
order by differences

Task 13
select *
from(select a.brand, a.itemId, a.revenue, ROW_NUMBER() over(PARTITION by a.brand order by a.revenue DESC) as rn
    from(select it.brand, s.itemId, sum(s.salesRub) as revenue
        from distributor.sales as s INNER Join distributor.item as it
        ON (it.itemId = s.itemId)
        WHERE it.brand is not null
        group by s.itemId, it.brand) as a) as b
WHERE rn <= 3

Task 25

select a.weekday, CAST(a.quantity as float)/CAST(a.sum_q as float) as [колич. коэффициент], 
CAST(a.money as float)/CAST(a.sum_m as float) as [цен. коэфф.]
from(SELECT DISTINCT DATEPART(weekday, s.dateId) as weekday, count(s.itemId) over(PARTITION by DATEPART(weekday, s.dateId)) as quantity,
    count(s.itemId) over (PARTITION by 1) as sum_q, count(s.salesRub) over (PARTITION by 1) as sum_m,
    count(s.salesRub) over(PARTITION by DATEPART(weekday, s.dateId)) as money
    from distributor.sales as s inner join distributor.item as it
    ON s.itemId = it.itemId
    WHERE it.category = 'Обои'
    AND s.itemId is not null
    ) as a
order by a.weekday

Task 9 (доработал!!!)
SELECT years, sum(net_profit) as 'net profit'
fROM(
SELECT year(b.dateId) as years, b.itemId, b.salesRub, b.value, b.DDP,
CASE
WHEN b.value is null then b.salesRub - b.DDP
ELSE b.salesRub - b.DDP * b.value
END as net_profit
from(select s.checkId, s.itemId, s.dateId, s.salesRub,d.currency1, d.DDP, c.value
from distributor.sales as s
inner join (select t.*
from(select p.itemId, p.DDP, p.monthId, p.yearId, p.currency1, ROW_NUMBER() over(partition by p.itemId, p.dates order by p.currency1) as rn
    from
        (select DISTINCT ddp.DDP, ddp.itemId, ddp.yearId*100 + ddp.monthId as dates, ddp.monthId, ddp.yearId, CASE
        When currencyPurchase like 'E%'then 'EUR'
        WHEN currencyPurchase like 'R%'then 'RUB'
        WHEN currencyPurchase like '%-%'then 'RUB'
        WHEN currencyPurchase like 'G%'then 'GBP'
        WHEN currencyPurchase like 'U%'then 'USD'
        WHEN currencyPurchase is null then 'RUB'
        else TRIM(currencyPurchase)
        end as currency1
        from distributor.ddp
        where ddp.DDP is not null) as p) as t
where t.rn = 1) as d
on s.itemId = d.itemId and d.monthId = month(s.dateId) and d.yearId = year(s.dateId)
left join distributor.currency as c
on s.dateId = c.dateId and d.currency1 = c.currency) as b ) as f
group by years
order by years

Task 17
select c.dates, c.quantity
from(select b.*, ROW_NUMBER() over(PARTITION by dates order by quantity DESC) as rn
from(select DATEFROMPARTS(year(a.dateId), month(a.dateId), 1) as dates,
sum(a.qua) over(PARTITION BY 1 order by DATEFROMPARTS(year(a.dateId), month(a.dateId), 1)
rows between  180 following and UNBOUNDED FOLLOWING) as quantity
from(select distinct dateId, count(itemId) over(PARTITION BY dateId order by dateId) as qua 
    from distributor.sales
    where itemId is not NULL) as a
) as b) as c
where c.rn = 1
order by c.dates

Task 21
select sm.fullname, c.companyName, t.years, t.months, t.rev
from(select r.salesManagerId, r.companyId, r.years, r.months, r.revenue + r.prev1Revenue + r.prev2Revenue as rev,
    ROW_NUMBER() over(PARTITION by r.salesManagerId, r.years, r.months order by r.revenue + r.prev1Revenue + r.prev2Revenue DESC) as rn
    from(select s.salesManagerId, s.companyId, s.years, s.months, s.revenue,
        CASE
        WHEN abs(s.months - s.prev1Month) = 1 then LAG(s.revenue, 1, 0) over(partition by s.salesManagerId, s.companyId, s.years order by s.months)
        ELSE 0
        END as prev1Revenue,
        CASE
        WHEN abs(s.months - s.prev2Month) = 2 then LAG(s.revenue, 2, 0) over(partition by s.salesManagerId, s.companyId, s.years order by s.months)
        WHEN abs(s.months - s.prev1Month) = 2 then LAG(s.revenue, 1, 0) over(partition by s.salesManagerId, s.companyId, s.years order by s.months)
        ELSE 0
        END as prev2Revenue
        from(select b.*, LAG(b.months, 1, 0) over(partition by b.salesManagerId, b.companyId, b.years order by b.months) as prev1Month,
            LAG(b.months, 2, 0) over(partition by b.salesManagerId, b.companyId, b.years order by b.months) as prev2Month
            from(select DISTINCT salesManagerId, companyId, year(dateId) as years, month(dateId) as months,
                    sum(salesRub) over(partition by salesManagerId, companyId, year(dateId), month(dateId) order by salesManagerId) as revenue
                    from distributor.sales
                    where salesManagerId is not null
                    ) as b) as s) as r) as t
inner join distributor.salesManager as sm on sm.salesManagerId = t.salesManagerId
inner join distributor.company as c on c.companyId = t.companyId
where t.rn < 6
order by t.salesManagerId, t.years, t.months, t.rev DESC

Task 28 (попробовал отыскать какие обои по материалу и цвету предпочитает каждая компания в определенный месяц, отосртировал по месяцам, чтобы посчитать вклад каждого вида обоев (по двум спецификациям) от суммарной прибыли в определенном месяца на протяжении всех лет. Т.е.выявление сезонных предпочтений как всех компаний, так и по отдельности.

select b.*
select g.months, g. companyName, g.revenue, g.detail1, g.detail2, CASE 
WHEN contrib != 0 then revenue/ contrib
ELse 0
end as contribution
from(select month(b.dateId) as months, companyName, revenue, detail1, detail2,
    sum(revenue) over(partition by month(b.dateId), detail1, detail2 order by revenue) as contrib
    from(select a.*, ROW_Number() over(PARTITION by month(dateId), companyName order by revenue DESC) as rn
        from(select s.dateId, com.companyName,sum(s.salesRub) as revenue, sp.detailSpecification3 as detail1, sp.detailSpecification6 as detail2
        from distributor.sales as s inner join distributor.item as it
        on it.itemId = s.itemId
        inner join distributor.specification as sp
        on s.itemId = sp.itemId
        inner join distributor.company as com
        on com.companyId = s.companyId
        where it.category = 'Обои'
        group by companyName, dateId, sp.detailSpecification3, sp.detailSpecification6) as a
        where detail1 is not null and detail2 is not null) as b
        where b.rn < 4) as g
order by months ,companyName,  revenue DESC 
